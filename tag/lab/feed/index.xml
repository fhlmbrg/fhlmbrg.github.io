<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>lab &#8211; Fredrik Holmberg</title>
	<atom:link href="/tag/lab/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>Network Consultant</description>
	<lastBuildDate>Thu, 10 Nov 2016 19:39:24 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.7.3</generator>

<image>
	<url>/wp-content/uploads/2016/04/cropped-2601-32x32.png</url>
	<title>lab &#8211; Fredrik Holmberg</title>
	<link>/</link>
	<width>32</width>
	<height>32</height>
</image> 
	<item>
		<title>Connecting our Juniper lab to the world</title>
		<link>/2016/04/connecting-our-juniper-lab-to-the-world/</link>
		<comments>/2016/04/connecting-our-juniper-lab-to-the-world/#respond</comments>
		<pubDate>Mon, 18 Apr 2016 08:01:26 +0000</pubDate>
		<dc:creator><![CDATA[Fredrik Holmberg]]></dc:creator>
				<category><![CDATA[juniper]]></category>
		<category><![CDATA[lab]]></category>
		<category><![CDATA[Uncategorized]]></category>

		<guid isPermaLink="false">/?p=196</guid>
		<description><![CDATA[Let&#8217;s say you have a Juniper EX switch that you want to connect to your new virtual lab. Maybe you&#8217;re training for the JNCIP-ENT. Maybe you need to verify reachability to a production network over an IPsec VPN tunnel. How do you connect your virtual Juniper lab to the world? Start by listing all the available local interfaces [&#8230;]]]></description>
				<content:encoded><![CDATA[<div id="attachment_86" style="width: 411px" class="wp-caption aligncenter"><img class="wp-image-86" src="/wp-content/uploads/2013/08/arpanet-5-1.jpg" alt="A young Michael Caine doing Juniper labs." width="401" height="275" srcset="/wp-content/uploads/2013/08/arpanet-5-1.jpg 400w, /wp-content/uploads/2013/08/arpanet-5-1-300x206.jpg 300w" sizes="(max-width: 401px) 100vw, 401px" /><p class="wp-caption-text">A young Michael Caine enjoying Juniper labs.</p></div>
<p>Let&#8217;s say you have a Juniper EX switch that you want to connect to your new <a href="/2016/04/on-demand-juniper-labs-using-vagrant/">virtual lab</a>. Maybe you&#8217;re training for the <a href="http://www.juniper.net/us/en/training/certification/certification-tracks/ent-routing-switching-track/#jncipent">JNCIP-ENT</a>. Maybe you need to verify reachability to a production network over an IPsec VPN tunnel. How do you connect your virtual Juniper lab to the world?</p>
<p><span id="more-196"></span></p>
<p>Start by listing all the available local interfaces (requires a VirtualBox setup):</p>
<blockquote>
<pre>$ <strong>VBoxManage list bridgedifs | grep ^Name</strong>
Name: en1: Wi-Fi (AirPort)
Name: en0: Ethernet
Name: en2: Thunderbolt 1
Name: p2p0
Name: bridge0</pre>
</blockquote>
<p>Select an interface from that list, then modify your <strong>Vagrantfile</strong> to connect <strong>vsrx1</strong> to the outside world:</p>
<blockquote>
<pre><span style="color: #999999;">  config.vm.define "vsrx1" do |vsrx1|
    vsrx1.vm.host_name = "vsrx1"
    vsrx1.vm.network "private_network",
                     ip: "10.99.12.1",
                     virtualbox__intnet: "1-2"
    vsrx1.vm.network "private_network",
                     ip: "10.99.31.1",
                     virtualbox__intnet: "1-3"</span>
<strong>    vsrx1.vm.network "public_network",
                     bridge: "en1: Wi-Fi (AirPort)"</strong>
  <span style="color: #999999;">end
</span></pre>
</blockquote>
<p>We have now bridged a physical interface, in this case my Macbook Wi-Fi interface, to <strong>vsrx1&#8217;s</strong> interface ge-0/0/3.0:</p>
<blockquote>
<pre>$ <strong>vagrant ssh vsrx1</strong>
--- JUNOS 12.1X47-D15.4 built 2014-11-12 02:13:59 UTC
root@vsrx1% <strong>cli</strong>
root@vsrx1&gt; <strong>show configuration interfaces ge-0/0/3</strong>
unit 0 {
    family inet {
        dhcp;
    }
}
root@vsrx1&gt; <strong>show interfaces terse ge-0/0/3.0</strong>
Interface               Admin Link Proto    Local                 Remote
ge-0/0/3.0              up    up   inet     10.24.5.207/24
root@vsrx01&gt; <strong>ping 8.8.8.8 count 3</strong>
PING 8.8.8.8 (8.8.8.8): 56 data bytes
64 bytes from 8.8.8.8: icmp_seq=0 ttl=44 time=35.096 ms
64 bytes from 8.8.8.8: icmp_seq=1 ttl=44 time=23.366 ms
64 bytes from 8.8.8.8: icmp_seq=2 ttl=44 time=36.630 ms

--- 8.8.8.8 ping statistics ---
3 packets transmitted, 3 packets received, 0% packet loss
round-trip min/avg/max/stddev = 23.366/31.697/36.630/5.924 ms
root@vsrx01&gt;
</pre>
</blockquote>
<p>Your lab can now reach <a href="http://www.dictionary.com/browse/internet">The Internet</a> through <strong>vsrx1</strong> ⚡️<img src="https://s.w.org/images/core/emoji/2.2.1/72x72/1f30d.png" alt="🌍" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p>
<p><a href="/consulting/">Get in touch</a> if you are looking for automation and Juniper consulting services.</p>
]]></content:encoded>
			<wfw:commentRss>/2016/04/connecting-our-juniper-lab-to-the-world/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>On-demand Juniper labs using Vagrant</title>
		<link>/2016/04/on-demand-juniper-labs-using-vagrant/</link>
		<comments>/2016/04/on-demand-juniper-labs-using-vagrant/#comments</comments>
		<pubDate>Mon, 11 Apr 2016 22:58:51 +0000</pubDate>
		<dc:creator><![CDATA[Fredrik Holmberg]]></dc:creator>
				<category><![CDATA[juniper]]></category>
		<category><![CDATA[lab]]></category>
		<category><![CDATA[vagrant]]></category>

		<guid isPermaLink="false">/?p=173</guid>
		<description><![CDATA[If you want user adoption, make your product easily accessible. Allow people to download it and start playing around. Provide study resources and hand out discounts to get people to start taking your certifications. Attract the engineers. Show how you can automate your infrastructure using Ansible. Get them hooked! One of the first steps to start learning any platform is to set up [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>If you want user adoption, make your product easily <a href="http://www.juniper.net/us/en/dm/free-vsrx-trial/">accessible</a>. Allow people to download it and start playing around. Provide <a href="http://www.juniper.net/us/en/training/jnbooks/day-one/">study resources</a> and hand out <a href="http://www.juniper.net/us/en/training/fasttrack/">discounts</a> to get people to start taking your certifications. Attract the engineers. Show how you can <a href="https://github.com/Juniper/ansible-junos-stdlib/">automate</a> your infrastructure using Ansible. Get them hooked!</p>
<p>One of the first steps to start learning any platform is to set up a lab. Engineers want labs and <a href="http://www.juniper.net/">Juniper</a> want you to run as many virtual routers as you possibly can on your laptop. To make this as simple and streamlined as possible they provide you with their own pre-built <a href="https://vagrantcloud.com/juniper">Vagrant boxes</a>. These boxes are tiny virtual machines that can run on top of different hypervisors.</p>
<p>In the following example I will show you how to manage the deployment and configuration of these boxes using Vagrant to set up a small Juniper lab.</p>
<p><span id="more-173"></span></p>
<h2>GO</h2>
<p>Start by downloading <a href="https://www.vagrantup.com/downloads.html">Vagrant</a> and <a href="https://www.virtualbox.org/wiki/Downloads">VirtualBox</a>. You might also need to install <a href="https://git-scm.com/downloads">Git</a>.</p>
<p>Clone Juniper&#8217;s Vagrant Github repository:</p>
<blockquote><p>$ <strong>git clone https://github.com/JNPRAutomate/vagrant-junos.git</strong><br />
Cloning into &#8216;vagrant-junos&#8217;&#8230;<br />
remote: Counting objects: 208, done.<br />
remote: Total 208 (delta 0), reused 0 (delta 0), pack-reused 208<br />
Receiving objects: 100% (208/208), 28.18 KiB | 0 bytes/s, done.<br />
Resolving deltas: 100% (84/84), done.<br />
Checking connectivity&#8230; done.</p></blockquote>
<p>You now have a directory created called &#8220;<strong>vagrant-junos</strong>&#8220;.</p>
<p>Install the Vagrant plugins needed:</p>
<blockquote><p>$ <strong>cd vagrant-junos</strong><br />
$ <strong>vagrant plugin install vagrant-junos</strong><br />
Installing the &#8216;vagrant-junos&#8217; plugin. This can take a few minutes&#8230;<br />
Installed the plugin &#8216;vagrant-junos (0.2.1)&#8217;!<br />
$ <strong>vagrant plugin install vagrant-host-shell</strong><br />
Installing the &#8216;vagrant-host-shell&#8217; plugin. This can take a few minutes&#8230;<br />
Installed the plugin &#8216;vagrant-host-shell (0.0.4)&#8217;!</p></blockquote>
<p>OK, let&#8217;s say we want to build a four node topology similar to this:</p>
<p><img class="size-full wp-image-217 aligncenter" src="/wp-content/uploads/2016/04/juniper_vagrant_topo.png" alt="juniper_vagrant_topo" width="403" height="288" srcset="/wp-content/uploads/2016/04/juniper_vagrant_topo.png 403w, /wp-content/uploads/2016/04/juniper_vagrant_topo-300x214.png 300w" sizes="(max-width: 403px) 100vw, 403px" /></p>
<p>First we need to describe this topology to Vagrant using a <strong>Vagrantfile</strong>. This is the file that Vagrant will use to give instructions to VirtualBox on how to connect interfaces, how much memory to allocate to each node etc.</p>
<p>Our <strong>Vagrantfile</strong> should look like this:</p>
<blockquote>
<pre style="margin: 0; line-height: 125%;">#
# Juniper lab v0.1
#
# ge-0/0/0.0: management interface
# ge-0/0/1.0 - ge-0/0/7.0: user interfaces

Vagrant.configure(2) do |config|
  config.vm.box = "juniper/ffp-12.1X47-D15.4-packetmode"

  config.vm.provider "virtualbox" do |vb|
    vb.memory = 1024
    vb.cpus = 2
    vb.gui = false
  end

  config.vm.define "vsrx1" do |vsrx1|
    vsrx1.vm.host_name = "vsrx1"
    vsrx1.vm.network "private_network",
                     ip: "10.99.12.1",
                     virtualbox__intnet: "1-2"
    vsrx1.vm.network "private_network",
                     ip: "10.99.13.1",
                     virtualbox__intnet: "1-3"
  end

  config.vm.define "vsrx2" do |vsrx2|
    vsrx2.vm.host_name = "vsrx2"
    vsrx2.vm.network "private_network",
                     ip: "10.99.23.2",
                     virtualbox__intnet: "2-3"
    vsrx2.vm.network "private_network",
                     ip: "10.99.12.2",
                     virtualbox__intnet: "1-2"
  end

  config.vm.define "vsrx3" do |vsrx3|
    vsrx3.vm.host_name = "vsrx3"
    vsrx3.vm.network "private_network",
                     ip: "10.99.13.3",
                     virtualbox__intnet: "1-3"
    vsrx3.vm.network "private_network",
                     ip: "10.99.23.3",
                     virtualbox__intnet: "2-3"
    vsrx3.vm.network "private_network",
                     ip: "10.99.34.3",
                     virtualbox__intnet: "3-4"
  end

  config.vm.define "vsrx4" do |vsrx4|
    vsrx4.vm.host_name = "vsrx4"
    vsrx4.vm.network "private_network",
                      ip: "10.99.34.4",
                      virtualbox__intnet: "3-4"
  end
end
</pre>
</blockquote>
<p>We allocate 1GB of memory to each node (512MB also works), two vCPUs and hide the console/GUI (headless). Then we specify all the interfaces and private networks that the nodes will communicate over. Pretty straight forward.</p>
<h2>Will it float?</h2>
<p>Only one way to find out! Start the lab:</p>
<blockquote><p>$ <strong>vagrant up</strong><br />
Bringing machine &#8216;vsrx1&#8217; up with &#8216;virtualbox&#8217; provider&#8230;<br />
Bringing machine &#8216;vsrx2&#8217; up with &#8216;virtualbox&#8217; provider&#8230;<br />
Bringing machine &#8216;vsrx3&#8217; up with &#8216;virtualbox&#8217; provider&#8230;<br />
Bringing machine &#8216;vsrx4&#8217; up with &#8216;virtualbox&#8217; provider&#8230;<br />
&#8230;<br />
==&gt; vsrx1: Importing base box &#8216;juniper/ffp-12.1X47-D15.4-packetmode&#8217;&#8230;<br />
==&gt; vsrx1: Matching MAC address for NAT networking&#8230;<br />
&#8230;<br />
==&gt; vsrx1: Checking if box &#8216;juniper/ffp-12.1X47-D15.4-packetmode&#8217; is up to date&#8230;<br />
==&gt; vsrx1: Setting the name of the VM: vagrant-junos_vsrx1_1460289979254_16001<br />
==&gt; vsrx1: Fixed port collision for 22 =&gt; 2222. Now on port 2203.<br />
==&gt; vsrx1: Clearing any previously set network interfaces&#8230;<br />
==&gt; vsrx1: Preparing network interfaces based on configuration&#8230;<br />
vsrx1: Adapter 1: nat<br />
vsrx1: Adapter 2: intnet<br />
vsrx1: Adapter 3: intnet<br />
==&gt; vsrx1: Forwarding ports&#8230;<br />
vsrx1: 22 (guest) =&gt; 2203 (host) (adapter 1)<br />
==&gt; vsrx1: Running &#8216;pre-boot&#8217; VM customizations&#8230;<br />
==&gt; vsrx1: Booting VM&#8230;<br />
==&gt; vsrx1: Waiting for machine to boot. This may take a few minutes&#8230;<br />
vsrx1: SSH address: 127.0.0.1:2203<br />
vsrx1: SSH username: root<br />
vsrx1: SSH auth method: private key<br />
&#8230;<br />
==&gt; vsrx1: Machine booted and ready!<br />
==&gt; vsrx1: Checking for guest additions in VM&#8230;<br />
&#8230;<br />
==&gt; vsrx1: Setting hostname&#8230;<br />
==&gt; vsrx1: Configuring and enabling network interfaces&#8230;</p></blockquote>
<p>These operations will repeat until all of the nodes are up and running.</p>
<p>When completed you can check the status of the nodes:</p>
<blockquote><p>$ <strong>vagrant status</strong><br />
Current machine states:</p>
<p>vsrx1                                  running (virtualbox)<br />
vsrx2                                  running (virtualbox)<br />
vsrx3                                  running (virtualbox)<br />
vsrx4                                  running (virtualbox)</p></blockquote>
<p>Nice! Now what?</p>
<p>Try accessing one of the nodes:</p>
<blockquote><p>$ <strong>vagrant ssh vsrx4</strong><br />
&#8212; JUNOS 12.1X47-D15.4 built 2014-11-12 02:13:59 UTC<br />
root@vsrx4% <strong>cli</strong><br />
root@vsrx4&gt; <strong>show version</strong><br />
Hostname: vsrx4<br />
Model: firefly-perimeter<br />
JUNOS Software Release [12.1X47-D15.4]<br />
root@vsrx4&gt; <strong>ping 10.99.34.3 count 3</strong><br />
PING 10.99.34.3 (10.99.34.3): 56 data bytes<br />
64 bytes from 10.99.34.3: icmp_seq=0 ttl=64 time=9.094 ms<br />
64 bytes from 10.99.34.3: icmp_seq=1 ttl=64 time=0.992 ms<br />
64 bytes from 10.99.34.3: icmp_seq=2 ttl=64 time=1.185 ms</p>
<p>&#8212; 10.99.34.3 ping statistics &#8212;<br />
3 packets transmitted, 3 packets received, 0% packet loss<br />
round-trip min/avg/max/stddev = 0.992/3.757/9.094/3.775 ms</p></blockquote>
<p>It works! We have reachability between <strong>vsrx3</strong> and<strong> vsrx4</strong>!</p>
<h2>Final notes</h2>
<p>So you play around for a while, commit your configs and consider yourself done for the day. Then I&#8217;d recommend that you suspend the whole topology instead of shutting it down:</p>
<blockquote>
<pre>$ <strong>vagrant suspend</strong>
==&gt; vsrx1: Saving VM state and suspending execution...
==&gt; vsrx2: Saving VM state and suspending execution...
==&gt; vsrx3: Saving VM state and suspending execution...
==&gt; vsrx4: Saving VM state and suspending execution...
$ <strong>vagrant status</strong>
Current machine states:

vsrx1                     saved (virtualbox)
vsrx2                     saved (virtualbox)
vsrx3                     saved (virtualbox)
vsrx4                     saved (virtualbox)
</pre>
</blockquote>
<p>This way you save the running state of the whole lab topology. The benefit of doing this is that you can continue where you left off without having to wait for the boot sequence x $node.</p>
<p>Cool! What to do from here is all up to you. Have fun <img src="https://s.w.org/images/core/emoji/2.2.1/72x72/1f642.png" alt="🙂" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p>
<p>Professional Juniper consulting is available through my <a href="/consulting/">Consulting Services</a>.</p>
]]></content:encoded>
			<wfw:commentRss>/2016/04/on-demand-juniper-labs-using-vagrant/feed/</wfw:commentRss>
		<slash:comments>3</slash:comments>
		</item>
		<item>
		<title>Introducing GNSparser</title>
		<link>/2013/11/introducing-gnsparser/</link>
		<comments>/2013/11/introducing-gnsparser/#respond</comments>
		<pubDate>Thu, 21 Nov 2013 07:32:00 +0000</pubDate>
		<dc:creator><![CDATA[Fredrik Holmberg]]></dc:creator>
				<category><![CDATA[automation]]></category>
		<category><![CDATA[dynagen]]></category>
		<category><![CDATA[gns3]]></category>
		<category><![CDATA[gnsparser]]></category>
		<category><![CDATA[network lab]]></category>
		<category><![CDATA[scripting]]></category>
		<category><![CDATA[lab]]></category>

		<guid isPermaLink="false"></guid>
		<description><![CDATA[I have used Dynagen/GNS3 for some years now and recently it started to annoy me how much time I had to spend every time on the initial lab setup before I could start with the actual lab or proof of concept scenario. Usually I start off a lab by building the topology itself &#8211; adding [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>I have used Dynagen/GNS3 for some years now and recently it started to annoy me how much time I had to spend every time on the initial lab setup before I could start with the actual lab or proof of concept scenario.</p>
<p><span id="more-8"></span></p>
<p>Usually I start off a lab by building the topology itself &#8211; adding all the nodes, adding the network modules to each node and then connecting them all together. When that&#8217;s done I boot the topology <a href="/2013/08/gns3dynamips-labs-with-a-twist-using-digitalocean/">in the cloud</a>, figure out a proper addressing scheme, open a console session to each device, configure the Ethernet interfaces according to the scheme, configure loopback interfaces for router IDs and LAN simulation, configure global settings for lines, IPv6, logging etc. and then finally enable one or more routing protocols on all nodes for end-to-end connectivity.</p>
<p>What if I could outsource these initial router configuration steps? Just create a topology and off I go?</p>
<p>Unable to find a proper *aaS provider or Facebook app for this particular need, I built <a href="http://bitbucket.org/holmahenkel/gnsparser" target="_blank">something</a> that solves just that:</p>
<p><img class="size-full wp-image-40 aligncenter" src="http://104.196.36.32/wp-content/uploads/2013/11/gnsparser.png" alt="gnsparser" width="640" height="485" srcset="/wp-content/uploads/2013/11/gnsparser.png 640w, /wp-content/uploads/2013/11/gnsparser-300x227.png 300w" sizes="(max-width: 640px) 100vw, 640px" /></p>
<div style="clear: both; text-align: center;"></div>
]]></content:encoded>
			<wfw:commentRss>/2013/11/introducing-gnsparser/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>GNS3/Dynamips labs with a twist using DigitalOcean</title>
		<link>/2013/08/gns3dynamips-labs-with-a-twist-using-digitalocean/</link>
		<comments>/2013/08/gns3dynamips-labs-with-a-twist-using-digitalocean/#respond</comments>
		<pubDate>Wed, 07 Aug 2013 22:03:00 +0000</pubDate>
		<dc:creator><![CDATA[Fredrik Holmberg]]></dc:creator>
				<category><![CDATA[automation]]></category>
		<category><![CDATA[digital ocean]]></category>
		<category><![CDATA[dynagen]]></category>
		<category><![CDATA[gns3]]></category>
		<category><![CDATA[network lab]]></category>
		<category><![CDATA[lab]]></category>

		<guid isPermaLink="false"></guid>
		<description><![CDATA[Inspired by +Mikhail Schedrin and his cloud-only GNS3/Dynamips labs, I decided to configure one myself. Thanks to the awesome hosting provider DigitalOcean (http://www.digitalocean.com) you/ can have a proper Cisco CCNA/CCNP/CCIE lab running for 0.060 USD per hour (4GB Memory, 2 CPU Cores). Lab configuration Copy Dynamips (http://www.gns3.net/dynamips/) and a Cisco IOS image to your VM. Then configure the [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>Inspired by <a href="http://plus.google.com/109548533862883698112" target="_blank">+Mikhail Schedrin</a> and his cloud-only GNS3/Dynamips labs, I decided to configure one myself. Thanks to the awesome hosting provider DigitalOcean (<a href="http://www.digitalocean.com/">http://www.digitalocean.com/</a>) you can have a proper Cisco CCNA/CCNP/CCIE lab running for 0.060 USD per hour (4GB Memory, 2 CPU Cores).</p>
<p><span id="more-9"></span></p>
<p><b>Lab configuration</b><br />
Copy Dynamips (<a href="http://www.gns3.net/dynamips/">http://www.gns3.net/dynamips/</a>) and a Cisco IOS image to your VM. Then configure the Dynamips processes to launch at startup and prepare a timestamp log file for later:</p>
<table>
<tbody>
<tr>
<td bgcolor="lightgrey">
<pre>/etc/rc.local:
==============
/root/net/dynamips/dynamips-0.2.8-RC3-community-x86.bin -H 7200 &amp;
/root/net/dynamips/dynamips-0.2.8-RC3-community-x86.bin -H 7201 &amp;
/root/net/dynamips/dynamips-0.2.8-RC3-community-x86.bin -H 7202 &amp;

touch /tmp/do_timestamp.log
date +%s &gt; /tmp/do_timestamp.log</pre>
</td>
</tr>
</tbody>
</table>
<p>Run as many instances of Dynamips as you want. Two or more allows for load balancing from GNS3 by distributing the virtual routers across multiple processes.</p>
<p>Then configure GNS3 to use your VM as an &#8220;External Hypervisor&#8221;:</p>
<p><img class="alignnone size-full wp-image-84" src="http://104.196.36.32/wp-content/uploads/2013/08/ext_hypervisors-1.png" alt="ext_hypervisors" width="763" height="587" srcset="/wp-content/uploads/2013/08/ext_hypervisors-1.png 763w, /wp-content/uploads/2013/08/ext_hypervisors-1-300x231.png 300w, /wp-content/uploads/2013/08/ext_hypervisors-1-676x520.png 676w" sizes="(max-width: 763px) 100vw, 763px" /></p>
<p><img class="alignnone size-full wp-image-85" src="http://104.196.36.32/wp-content/uploads/2013/08/ios_images-1.png" alt="ios_images" width="909" height="589" srcset="/wp-content/uploads/2013/08/ios_images-1.png 909w, /wp-content/uploads/2013/08/ios_images-1-300x194.png 300w, /wp-content/uploads/2013/08/ios_images-1-768x498.png 768w, /wp-content/uploads/2013/08/ios_images-1-676x438.png 676w" sizes="(max-width: 909px) 100vw, 909px" /></p>
<p>Create a topology, <a href="http://bitbucket.org/holmahenkel/gnsparser">run it through GNSparser</a> and off you go.</p>
<div id="attachment_86" style="width: 410px" class="wp-caption alignnone"><img class="size-full wp-image-86" src="http://104.196.36.32/wp-content/uploads/2013/08/arpanet-5-1.jpg" alt="Even Michael Caine enjoy Cisco labs." width="400" height="274" srcset="/wp-content/uploads/2013/08/arpanet-5-1.jpg 400w, /wp-content/uploads/2013/08/arpanet-5-1-300x206.jpg 300w" sizes="(max-width: 400px) 100vw, 400px" /><p class="wp-caption-text">Even Michael Caine enjoy Cisco labs.</p></div>
<div style="clear: both; text-align: left;"></div>
<p style="clear: both; text-align: left;"><b>That awkward feeling</b></p>
<p style="clear: both; text-align: left;">Two hours later and you&#8217;re done for the day. You shutdown your laptop but <b>forget to destroy the VM!!</b> The meter keeps on running. Leave it running idle for another two weeks and you&#8217;ve used 20 USD on cloud air. There&#8217;s no market for cloud air, so that money is lost. There are lots of better things to invest in <a href="http://www.thinkgeek.com/interests/giftsunder20/">http://www.thinkgeek.com/interests/giftsunder20/</a>.</p>
<p style="clear: both; text-align: left;">Here&#8217;s one way to avoid those situations.</p>
<p style="clear: both; text-align: left;">We will create a script that checks if there are any active TCP sessions towards the Dynamips processes. Here&#8217;s an example of ten processes ready and listening:</p>
<table>
<tbody>
<tr>
<td bgcolor="lightgrey">
<pre>root@gns:~# netstat -na4
Active Internet connections (servers and established)
Proto Recv-Q Send-Q Local Address           Foreign Address         State      
tcp        0      0 0.0.0.0:7200            0.0.0.0:*               LISTEN     
tcp        0      0 0.0.0.0:7201            0.0.0.0:*               LISTEN     
tcp        0      0 0.0.0.0:7202            0.0.0.0:*               LISTEN     
tcp        0      0 0.0.0.0:7203            0.0.0.0:*               LISTEN     
tcp        0      0 0.0.0.0:7204            0.0.0.0:*               LISTEN     
tcp        0      0 0.0.0.0:7205            0.0.0.0:*               LISTEN     
tcp        0      0 0.0.0.0:7206            0.0.0.0:*               LISTEN     
tcp        0      0 0.0.0.0:7207            0.0.0.0:*               LISTEN     
tcp        0      0 0.0.0.0:7208            0.0.0.0:*               LISTEN     
tcp        0      0 0.0.0.0:7209            0.0.0.0:*               LISTEN</pre>
</td>
</tr>
</tbody>
</table>
<p>Should the script find TCP sessions against ports 7200-7209 in an ESTABLISHED state, it will set an initial counter with the current UNIX timestamp.</p>
<p>After you&#8217;ve logged out and your TCP sessions are torn down, the script will figure out that there are no ESTABLISHED sessions left. It will then start to count down for one hour.</p>
<p>If you haven&#8217;t reconnected to the VM (resetting the counter) within that time frame, the VM will go kamikaze on itself and issue a destroy request using the DigitalOcean API (<a href="https://www.digitalocean.com/api">https://www.digitalocean.com/api</a>).</p>
<p><b>Meet the self-destructing VM</b><br />
First, install the PHP5 CLI interpreter package to run PHP scripts on your server. Here&#8217;s how on Ubuntu etc.:</p>
<table>
<tbody>
<tr>
<td bgcolor="lightgrey">
<pre>$ apt-get install php5-cli</pre>
</td>
</tr>
</tbody>
</table>
<p>Copy the following script to a suitable location:</p>
<blockquote>
<pre>do_destroy.php
==============
&lt;?php

$api_key = "secret_API_key";
$api_cid = "secret_API_cid";

$file = '/tmp/do_timestamp.log';
$ts_log = file_get_contents($file);
$ts_diff = time() - $ts_log;

$vm = "gns"; // NAME OF VIRTUAL MACHINE AT DO

function destroy($vm) {
        global $api_key, $api_cid;

        $do_status = file_get_contents('https://api.digitalocean.com/droplets/?client_id=' . $api_cid . '&amp;api_key=' . $api_key);

        $ar_status = json_decode("$do_status", true);

        foreach($ar_status['droplets'] as $droplet) {
                if($droplet['name'] == $vm) {
#                       file_get_contents('https://api.digitalocean.com/droplets/' . $droplet['id'] . '/destroy/?client_id=' . $api_cid . '&amp;api_key=' . $api_key);
                } else {
                        continue;
                }
        }
}

function acon() {
        $netstat = exec("netstat -na4 | grep -E ':720' | grep -E 'ESTABLISHED' | wc -l");
        if($netstat &gt; 0) {
                return 1;
        } else {
                return 0;
        }
}

if(acon() == 1) {
        $curtime = time() . "n";
        file_put_contents($file, $curtime);
} elseif(acon() == 0 &amp;&amp; $ts_diff &gt; 3600) {
        destroy($vm);
} else {
        return 0;
}

?&gt;</pre>
</blockquote>
<p>Configure a cron job to run every 15 minutes:</p>
<table>
<tbody>
<tr>
<td bgcolor="lightgrey">
<pre>crontab -e:
===========
*/15 * * * * php /root/sh/do_destroy.php &gt; /dev/null 2&gt;&amp;1</pre>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>With all this configured and working, create a snapshot of your VM. This way you can setup a network lab whenever you feel like it. One way is by using the Android application Basin (<a href="http://basinapp.com/">http://basinapp.com/</a>) on your phone. Best of all, no need to worry about leaving the VM running. Automation will take care of the cleaning &lt;3</p>
<p>Good luck!</p>
]]></content:encoded>
			<wfw:commentRss>/2013/08/gns3dynamips-labs-with-a-twist-using-digitalocean/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
	</channel>
</rss>
